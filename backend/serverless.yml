org: tmuehlba
app: serverless-todo-app
service: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: tommy-attachment-bucket-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH0_JWKS_URL: tbd'

  logs:
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"
  
custom:
  documentation:
    api:
      info:
        version: '1.0'
        title: 'Serverless Todo App API'
        description: 'A simple todo app built with serverless'
    models:
      - name: CreateTodoRequest
        contentType: "application/json"
        schema: ${file(models/create-todo-model.json)}
      - name: UpdateTodoRequest
        contentType: "application/json"
        schema: ${file(models/update-todo-model.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          documentation:
            summary: "Get a User todo"
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !GetAtt TodosTable.Arn

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          documentation:
            summary: "Create todo"
            requestModels:
              "application/json": CreateTodoRequest
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt TodosTable.Arn

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          documentation:
            summary: "Update todo"
            requestModels:
              "application/json": UpdateTodoRequest
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/update-todo-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt TodosTable.Arn

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          documentation:
            summary: "Delete todo"
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt TodosTable.Arn

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          documentation:
            summary: "Generate todo image url"
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: !GetAtt AttachmentsBucket.Arn
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt TodosTable.Arn

resources:
  Resources:
    RequestBodyValidator:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'request-body-validator'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
      Description: "Validates the request body"

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
      Description: "Standard 4XX response"
    
    # DynamoDB
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODOS_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # S3 Bucket
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedOrigins:
                - "*"
              AllowedMethods:
                - GET
                - POST
                - PUT
                - HEAD
                - DELETE
              MaxAge: 3000

    # S3 Attachments Bucket Policy
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AttachmentsBucket
        PolicyDocument:
          Id: S3AttachmentBucketPolicy
          Statement:
              - Effect: Allow
                Action: 
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - ${self:provider.environment.ATTACHMENT_S3_BUCKET}
                      - /*
                Principal: "*"